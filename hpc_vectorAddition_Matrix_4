//Addition of two large vectors

#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

vector<int> parallelVectorAddition(const vector<int>& a, const vector<int>& b) {
    int size = a.size();
    vector<int> result(size);

    #pragma omp parallel for
    for (int i = 0; i < size; i++) {
        result[i] = a[i] + b[i];
    }

    return result;
}

int main() {
    vector<int> a = {1, 2, 3, 4, 5};
    vector<int> b = {6, 7, 8, 9, 10};

    vector<int> result = parallelVectorAddition(a, b);

    // Print the result
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Matrx Multiplication

#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

vector<vector<int>> parallelMatrixMultiplication(const vector<vector<int>>& matrix1, const vector<vector<int>>& matrix2) {
    int rows1 = matrix1.size();
    int cols1 = matrix1[0].size();
    int cols2 = matrix2[0].size();

    vector<vector<int>> result(rows1, vector<int>(cols2, 0));

    #pragma omp parallel for collapse(2)
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols2; j++) {
            for (int k = 0; k < cols1; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }

    return result;
}

int main() {
    vector<vector<int>> matrix1 = {
        {1, 2},
        {3, 4},
        {5, 6}
    };

    vector<vector<int>> matrix2 = {
        {7, 8},
        {9, 10}
    };

    vector<vector<int>> result = parallelMatrixMultiplication(matrix1, matrix2);

    // Print the result
    for (const auto& row : result) {
        for (int num : row) {
            cout << num << " ";
        }
        cout << endl;
    }

    return 0;
}
