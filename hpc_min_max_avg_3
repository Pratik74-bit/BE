#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <omp.h>

using namespace std;

struct ArrayStats {
    int min;
    int max;
    int sum;
    double average;
};

ArrayStats computeArrayStats(const vector<int>& arr) {
    ArrayStats stats;
    stats.min = numeric_limits<int>::max();
    stats.max = numeric_limits<int>::min();
    stats.sum = 0;
    stats.average = 0.0;
    
    #pragma omp parallel for reduction(min : stats.min) reduction(max : stats.max) reduction(+: stats.sum)
    for (int i = 0; i < arr.size(); i++) {
        stats.min = min(stats.min, arr[i]);
        stats.max = max(stats.max, arr[i]);
        stats.sum += arr[i];
    }
    
    stats.average = static_cast<double>(stats.sum) / arr.size();
    
    return stats;
}

int main() {
    vector<int> arr = {9, 2, 7, 1, 5, 3, 8, 6, 4};
    
    ArrayStats stats = computeArrayStats(arr);
    
    cout << "Minimum: " << stats.min << endl;
    cout << "Maximum: " << stats.max << endl;
    cout << "Sum: " << stats.sum << endl;
    cout << "Average: " << stats.average << endl;
    
    return 0;
}
